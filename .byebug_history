exit
welcome_message
toy_robot_app.welcome_message
message
exit
message
exit
self
exit
goodbye_message
exit
toy_robot.send(:run_commands, toy_robot, get_command)
get_command
exit
get_command
exit
get_command
exit
c
direction
c
direction
c
direction
c
direction
exit
toy_robot.place(get_command)
test
exit
$exit
toy_robot.place(get_command)
test
exit
$stdin
get_command
exit
eixt
get_command
toy_robot.place(get_command)
exit
place_valid
array
exit
array
exit
toy_robot.robot_on_table
exit
get_command
toy_robot.place(get_command)
exit
toy_robot.place(get_command)
exit
toy_robot.robot_on_table
toy_robot.on_table
exit
toy_robot
exit
run_commands(toy_robot, get_command)
get_command
toy_robot
exit
get_command
toy_robot
$stdin
run_command(toy_robot, get_command)
get_command
c
exit
toy_robot.place('0,0,north')
toy_robot
toy_robot.move
toy_robot.report
exit
input
exit
input
exit
input
exit
input
exit
input
exit
input
exit
input
exit
placement[1].numeric?
placement[0].numeric?
Integer(placement[0])
Integer(placement[1])
placement[1].class
placement[1]
placement[1].is_a?(Integer)
placement
c
continue
exit
input.upcase.split(/, | |,/, 4)
input
input.split(/, | |,/, 4)
input.upcase
input = 'place 1,2,north'
array.upcase
array = ['array','array2']
place
place 1,2,north
report
place 1,2
continue
exit
placement
place_valid?(placement)
continue
place_valid?(placement)
placement
exit
place_valid?(placement)
exit
place_valid?
exit
placement[1].class
@x.class
exit
@x.class
@y.class
exit
@y.class
@y.type
@y
exit
@robot_on_table
exit
@x
exit
placement
exit
placement[1]
placement
exit
robot_on_table?
exit
robot_on_table?
exit
command_place?(input)
input
exit
@y
next
@direction
exit
direction
y
x
@x
exit
rows
@table
@talbe
